description = 'system setup'

group = 'lowlevel'

sysconfig = dict(
    cache = configdata('config_data.cache_host'),
    instrument = 'Stressi',
    experiment = 'Exp',
    datasinks = [
        'conssink', 'daemonsink', 'livesink', 'caresssink',
        'nxsink',
        # 'LiveImgSink', 'LiveImgSinkLog', 'dbgsink',
    ],
    # notifiers = ['email', 'smser'],
)

modules = ['nicos.commands.standard']

# includes = ['notifiers']

devices = dict(
    Stressi = device('nicos.devices.instrument.Instrument',
        description = 'Virtual STRESSI instrument',
        instrument = 'V-Stress-Spec',
        responsible = 'M. Hofmann <michael.hofmann@frm2.tum.de>',
        doi = 'http://dx.doi.org/10.17815/jlsrf-1-25',
        website = 'http://www.mlz-garching.de/stress-spec',
        facility = 'Virtual MLZ instruments',
        operators = [
            'Technische Universität München (TUM)',
            'Technische Universität Clausthal',
            'German Engineering Materials Science Centre (GEMS)',
        ],
    ),
    Sample = device('nicos_virt_mlz.stressi.devices.sample.Sample',
        description = 'Simulation sample',
        samples = {
            1: {'name': 'Absorbtion experiment FoPra', 'sampletype': 1},
            2: {'name': 'Strain experiment FoPra E-Mod 211', 'sampletype': 2},
            3: {'name': 'Strain experiment FoPra E-Mod 200', 'sampletype': 3},
            4: {'name': 'Fully flexible sample', 'sampletype': 4},
        },
    ),
    Exp = device('nicos.devices.experiment.Experiment',
        description = 'The currently running experiment',
        dataroot = configdata('config_data.dataroot'),
        sendmail = True,
        serviceexp = 'p0',
        sample = 'Sample',
        elog = True,
        managerights = dict(
            enableDirMode = 0o775,
            enableFileMode = 0o644,
            disableDirMode = 0o550,
            disableFileMode = 0o440,
            # owner = 'stressi',
            # group = 'stressi'
        ),
        forcescandata = True,
    ),
    filesink = device('nicos.devices.datasinks.AsciiScanfileSink'),
    conssink = device('nicos.devices.datasinks.ConsoleScanSink'),
    daemonsink = device('nicos.devices.datasinks.DaemonSink'),
    livesink = device('nicos.devices.datasinks.LiveViewSink'),
    # dbgsink = device('nicos.devices.debug.datasinks.DebugDataSink'),
    Space = device('nicos.devices.generic.FreeSpace',
        description = 'The amount of free space for storing data',
        path = configdata('config_data.dataroot'),
        minfree = 5,
    ),
    LogSpace = device('nicos.devices.generic.FreeSpace',
        description = 'Space on log drive',
        path = configdata('config_data.logging_path'),
        minfree = 0.5,
        visibility = (),
    ),
    UBahn = device('nicos_mlz.devices.mvg.MVG',
        description = 'Next subway departures',
        tangodevice='tango://ictrlfs.ictrl.frm2.tum.de:10000/mvg/U6/departures',
        limit =3 ,
    ),
    caresssink = device('nicos_mlz.stressi.datasinks.CaressScanfileSink',
        filenametemplate = ['m2%(scancounter)08d.dat'],
        detectors = ['adet'],
    ),
    yamlsink = device('nicos_mlz.stressi.datasinks.YamlDatafileSink',
        filenametemplate = ['m2%(scancounter)08d.yaml'],
    ),
    nxsink = device('nicos.nexus.NexusSink',
        templateclass='nicos_mlz.nexus.nexus_templates.PowderTemplateProvider',
        settypes = {'point'},
        filenametemplate = ['m2%(scancounter)08d.nxs'],
    ),
    # LiveImgSinkLog = device('nicos.devices.datasinks.PNGLiveFileSink',
    #     description = 'Saves live image as .png every now and then',
    #     filename = 'webroot/live_log.png',
    #     log10 = True,
    #     interval = 1,
    # ),
    # LiveImgSink = device('nicos.devices.datasinks.PNGLiveFileSink',
    #     description = 'Saves live image as .png every now and then',
    #     filename = 'webroot/live_lin.png',
    #     interval = 1,
    # ),
)
