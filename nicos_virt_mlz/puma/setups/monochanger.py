description = 'Monochanger'
group = 'optional'

includes = ['monochromator']

monostates = ['GE311', 'PG002', 'CU220', 'CU111', 'None']
monodevices = ['mono_ge311', 'mono_pg002', 'mono_cu220', 'mono_cu111',
               'mono_dummy']
magazinepos = [(315.4, 8), (45.46, 1), (135.4, 2), (225.4, 4)]

devices = dict(
    st_lift = device('nicos_mlz.puma.devices.VirtualReferenceMotor',
        unit = 'mm',
        abslimits = (-145, 360),
        speed = 0.1,
        visibility = (),
    ),
    mli = device('nicos.devices.generic.Axis',
        description = 'Axis for the monochromator changer lift',
        motor = 'st_lift',
        dragerror = 20,
        precision = 0.15,
        offset = 0,
        maxtries = 10,
        loopdelay = 1,
    ),
    sw_lift = device('nicos.devices.generic.ReadonlySwitcher',
        description = 'Switches of the lift axis card',
        readable = 'st_lift',
        fmtstr = '%d',
        visibility = (),
        mapping = {
            1: -142.2,
            2: 358.1,
            4: 0,
        },
        fallback = 0,
    ),
    lift = device('nicos_mlz.puma.devices.SenseSwitch',
        description = 'Monochromator lift',
        moveables = 'mli',
        readables = 'sw_lift',
        mapping = dict(
            top2   = (358.1, 1),
            top1 = (355.3, 0),
            ref = (0, 4),
            bottom = (-142.5, 2),
        ),
        precision = [0.5, 0],
        blockingmove = True,
        fallback ='<unknown>',
        timeout = 300,
    ),
    # Magazin
    mag = device('nicos.devices.generic.Axis',
        description = 'monochromator magazine moving axis',
        motor = device('nicos.devices.generic.VirtualMotor',
            unit = 'deg',
            abslimits = (20, 340),
        ),
        precision = 0.05,
        offset = 0,
        maxtries = 10,
        dragerror = 90,
        loopdelay = 2,
    ),
    io_mag = device('nicos.devices.generic.ReadonlySwitcher',
        readable = 'mag',
        mapping = {
            1: 45.46,
            2: 135.4,
            4: 225.4,
            8: 315.4,
        },
        fallback = 0,
        unit = '',
        visibility = (),
    ),
    magazine = device('nicos_mlz.puma.devices.SenseSwitch',
        description = 'Monochromator magazine',
        moveables = 'mag',
        readables = 'io_mag',
        mapping = dict(zip(monostates[:4], magazinepos)),
        precision = [0.2, 0],
        unit = '',
        blockingmove = True,
        fallback ='<unknown>',
        timeout = 300,
    ),
    # Magnetic Lock
    mlock_op = device('nicos_mlz.puma.devices.VirtualLogoFeedback',
        input = 'mlock_set',
        visibility = (),
    ),
    mlock_cl = device('nicos_mlz.puma.devices.VirtualLogoFeedback',
        input = 'mlock_set',
        inverted = True,
        visibility = (),
    ),
    mlock_set = device('nicos_mlz.puma.devices.VirtualDigitalOutput',
        visibility = (),
    ),
    mlock = device('nicos_mlz.puma.devices.MagLock',
        description = 'Magnetic lock at magazine',
        states = monostates[:4],
        magazine = 'magazine',
        io_open = 'mlock_op',
        io_closed = 'mlock_cl',
        io_set = 'mlock_set',
        unit = '',
    ),
    # Greifer (grip)
    gr_stat = device('nicos_mlz.puma.devices.VirtualLogoFeedback',
        input = 'gr_set',
        unit = '',
        visibility = (),
    ),
    gr_set = device('nicos_mlz.puma.devices.VirtualDigitalOutput',
        unit = '',
        visibility = (),
    ),
    grip = device('nicos_mlz.puma.devices.SenseSwitch',
        description = 'monochromator grip',
        moveables = 'gr_set',
        readables = 'gr_stat',
        mapping = dict(open=(1, 2), closed=(0, 1)),
        precision = None,  # literal compare!
        blockingmove = True,
        unit = '',
        timeout = 13,
        fallback ='<unknown>',
    ),
    # 3R coupling
    r3 =  device('nicos.devices.generic.ManualSwitch',
        description = 'R3 coupling holding monochromators',
        states = ['closed', 'open'],
        unit = '',
    ),
    # holdstat
    holdstat_io = device('nicos.devices.generic.ManualSwitch',
        states = [14, 13, 11, 7, 15],
        unit = '',
        visibility = (),
    ),
    holdstat = device('nicos.devices.generic.ReadonlySwitcher',
        description = 'What is in the holder position',
        # monostates has five elements ! (last one is for 'none')
        mapping = dict(zip(monostates, [14, 13, 11, 7, 15])),
        readable = 'holdstat_io',
    ),
    monostat_io = device('nicos.devices.generic.ManualSwitch',
        states = [4, 5, 2, 3, 0],
        unit = '',
        visibility = (),
    ),
    mono_stat = device('nicos.devices.generic.ReadonlySwitcher',
        description = 'What is at the monotable',
        # monostates has five elements ! (last one is for 'none').
        # Unfortunately, Dummy (like 'none') returns 0
        mapping = dict(zip(monostates, [4, 5, 2, 3, 0])),
        readable = 'monostat_io',
    ),
    # Mchanger
    mchanger = device('nicos_mlz.puma.devices.Mchanger',
        description = 'The actual monochromator changer',
        monochromator = 'mono',
        mapping = dict(zip(monostates, monodevices)),
        magazine = 'magazine',
        r3 = 'r3',
        lift = 'lift',
        grip = 'grip',
        mlock = 'mlock',
        holdstat = 'holdstat',
        mono_stat = 'mono_stat',
        focush = 'mfhpg',
        focusv = 'mfvpg',
        changing_positions = dict(
            # taking into account mth offset 90.0, /2017.07.27
            mth = 90.222,
            mtt = -36.5027,
            # nominal position is 16.14, but w/o coder we use a slightly
            # different value.
            mty = 18.14,
            mgx = 0,
            mgy = 0,
        ),
        init_positions = dict(
            mty = 70,
            mgx = 0,
            mgy = 0.1,
        ),
        unit = '',
    ),
    mono_dummy = device('nicos.devices.tas.Monochromator',
        description = "Dummy monochromator, DON'T USE FOR EXPERIMENTS!",
        order = 1,
        unit = 'A-1',
        theta = 'mth',
        twotheta = 'mtt',
        reltheta = True,
        focush = None,
        focusv = None,
        hfocuspars = [1],
        vfocuspars = [1],
        abslimits = (1, 60),
        material = 'Si',
        reflection = (1, 1, 1),
        dvalue = 3.1415,
        scatteringsense = -1,
        crystalside = -1,
        fixed = "Dummy monochromator, DON'T USE FOR EXPERIMENTS!",
        fixedby = ('brain', 30),
    ),
)
