description = 'TEST setup for new version of Monochanger on PANDA (now with PLC)'

tango_base = 'tango://phys.panda.frm2:10000/panda/'
includes = ['system']

group = 'lowlevel'

# below devices and setting need to keep in sync with the PLC-code!
devices = dict(
    # sensing inputs...
    lift_sw = device('nicos.devices.entangle.DigitalInput',
        tangodevice = tango_base + 'monochanger/plc_lift_pos',
        description = 'Lift Position as sensed by the positional switches',
    ),
    magazine_sw = device('nicos.devices.entangle.DigitalInput',
        tangodevice = tango_base + 'monochanger/plc_magazin_pos',
        description = 'Magazin Position as sensed by the positional switches',
    ),
    liftclamp_sw = device('nicos.devices.entangle.DigitalInput',
        tangodevice = tango_base + 'monochanger/plc_liftclamp_pos',
        description = 'Lift-clamp position as sensed by the positional switches',
    ),
    magazineclamp_sw = device('nicos.devices.entangle.DigitalInput',
        tangodevice = tango_base + 'monochanger/plc_magazinclamp_pos',
        description =
        'Magazin-clamp position as sensed by the positional switches',
    ),
    occupied_sw = device('nicos.devices.entangle.DigitalInput',
        tangodevice = tango_base + 'monochanger/plc_magazin_occ_sw',
        description = 'Occupancy switches of the magazin',
    ),
    magazine_status = device('nicos.devices.entangle.NamedDigitalInput',
        tangodevice = tango_base + 'monochanger/plc_magazin_occ',
        description =
        'Shows if the magazine slot currently at lift position is free',
        mapping = dict(free = 0, occupied = 1),
    ),
    analog1 = device('nicos.devices.entangle.Sensor',
        tangodevice = tango_base + 'monochanger/plc_analog1',
        description = '16-Bit A/D value 1 (sense)',
    ),
    analog2 = device('nicos.devices.entangle.Sensor',
        tangodevice = tango_base + 'monochanger/plc_analog2',
        description = '16-Bit A/D value 2 (ref)',
    ),
    spare_inputs = device('nicos.devices.entangle.DigitalInput',
        tangodevice = tango_base + 'monochanger/plc_spare_inputs',
        description = 'Spare inputs as bit-patterns',
    ),
    # now the output devices...
    # output devices will only do anything if enable_word is set to
    # the right code word.
    lift_m = device('nicos.devices.entangle.DigitalOutput',
        tangodevice = tango_base + 'monochanger/plc_lift',
        description = 'Lift of Monochanger (MOVEABLE!!!)',
    ),
    magazine_m = device('nicos.devices.entangle.DigitalOutput',
        tangodevice = tango_base + 'monochanger/plc_magazin',
        description = 'Magazin of Monochanger (MOVEABLE!!!)',
    ),
    liftclamp_m = device('nicos.devices.entangle.DigitalOutput',
        tangodevice = tango_base + 'monochanger/plc_liftclamp',
        description = 'Liftclamp of Monochanger (MOVEABLE!!!)',
    ),
    magazinegrab_m = device('nicos.devices.entangle.DigitalOutput',
        tangodevice = tango_base + 'monochanger/plc_magazingrab',
        description = 'Magazinclamp of Monochanger (MOVEABLE!!!)',
    ),
    tablegrab_m = device('nicos.devices.entangle.DigitalOutput',
        tangodevice = tango_base + 'monochanger/plc_tablegrab',
        description = 'Tableclamp of Monochanger (MOVEABLE!!!)',
    ),
    inhibit_relay_m = device('nicos.devices.entangle.DigitalOutput',
        tangodevice = tango_base + 'monochanger/plc_inhibit_relay',
        description = 'Inhibit_relay of Monochanger (MOVEABLE!!!)',
    ),
    # spare outputs work always
    spare_outputs = device('nicos.devices.entangle.DigitalOutput',
        tangodevice = tango_base + 'monochanger/plc_spare_outputs',
        description = 'Spare Outputs as bit-patterns',
    ),
    # extra stuff
    liftpos_analog = device('nicos.devices.entangle.Sensor',
        tangodevice = tango_base + 'monochanger/plc_liftpos_analog',
        description = 'Lift position as sensed by the A/D-converters',
    ),
    enable_word = device('nicos.devices.entangle.DigitalOutput',
        tangodevice = tango_base + 'monochanger/plc_enable',
        description = 'Security Enable word',
    ),
    cycle_counter = device('nicos.devices.entangle.DigitalInput',
        tangodevice = tango_base + 'monochanger/plc_cycle_counter',
        description = 'Cycle counter of the PLC',
        fmtstr = '0x%04x',
    ),
    # translate binary values to human-readable
    lift = device('nicos.devices.generic.Switcher',
        description = 'Lift of Monochanger (MOVEABLE!!!)',
        moveable = 'lift_m',
        precision = 0.1,
        blockingmove = False,
        fallback = 0,
        # translate PLC internal values to meaningful ones
        mapping = {1: 2,
                   2: 4,
                   3: 6,
                   4: 8},
    ),
    magazine = device('nicos.devices.generic.Switcher',
        description = 'Magazin of Monochanger (MOVEABLE!!!)',
        moveable = 'magazine_m',
        precision = 0.1,
        blockingmove = False,
        fallback = 'unknown',
        mapping = {'101': 2,
                   '110': 4,
                   '011': 6,
                   '111': 8},
    ),
    liftclamp = device('nicos.devices.generic.Switcher',
        description = 'Liftclamp of Monochanger (MOVEABLE!!!)',
        moveable = 'liftclamp_m',
        precision = 0.1,
        blockingmove = False,
        fallback = 'unknown',
        mapping = dict(open = 2, middle = 1, close = 0),
    ),
    magazinegrab = device('nicos.devices.generic.Switcher',
        description = 'Magazinclamp of Monochanger (MOVEABLE!!!)',
        moveable = 'magazinegrab_m',
        precision = 0.1,
        blockingmove = False,
        fallback = 'unknown',
        mapping = dict(open = 2, middle = 1, close = 0),
    ),
    tablegrab = device('nicos.devices.generic.Switcher',
        description = 'Tableclamp of Monochanger (MOVEABLE!!!)',
        moveable = 'tablegrab_m',
        precision = 0.1,
        blockingmove = False,
        fallback = 'unknown',
        mapping = dict(open = 1, close = 0),
    ),
    inhibit_relay = device('nicos.devices.generic.Switcher',
        description = 'Inhibit_relay of Monochanger (MOVEABLE!!!)',
        moveable = 'inhibit_relay_m',
        precision = 0.1,
        blockingmove = False,
        fallback = 'unknown',
        mapping = dict(on = 1, off = 0),  # ??
    ),
    changer = device('nicos_mlz.panda.devices.monochanger.Changer',
        description = "PANDA's monochromator changer",
        lift = 'lift',
        magazine = 'magazine',
        liftclamp = 'liftclamp',
        magazineclamp = 'magazinegrab',
        tableclamp = 'tablegrab',
        inhibitrelay = 'inhibit_relay',
        enable = 'enable_word',
        magazineocc = 'occupied_sw',
        magazinestatus = 'magazine_status',
        exchangepos = dict(
            mth = 88.673, s7motor = -36.11, mgx = 0, mtx = -6, mty = 5,
        ),
        precisionchange = dict(
            mth = [0.01, 0.001],
        ),  # pair of normal and exchange value
        requires = dict(level = 'admin')
    ),
)
