description = 'Standard setup for TASP'

motaprefix = 'SQ:TASP:mota:'
motbprefix = 'SQ:TASP:motb:'
cterprefix = 'SQ:TASP:counter'

devices = dict(
    a1 = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Monochromator omega',
        motorpv = motaprefix + 'A1',
        errormsgpv = motaprefix + 'A1-MsgTxt',
        precision = 0.02,
    ),
    mcv = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Monochromator curvature',
        motorpv = motaprefix + 'MCV',
        errormsgpv = motaprefix + 'MCV-MsgTxt',
        precision = 0.02,
    ),
    mtl = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Monochromator lower translation',
        motorpv = motaprefix + 'MTL',
        errormsgpv = motaprefix + 'MTL-MsgTxt',
        precision = 0.02,
    ),
    mtu = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Monochromator upper translation',
        motorpv = motaprefix + 'MTU',
        errormsgpv = motaprefix + 'MTU-MsgTxt',
        precision = 0.02,
    ),
    mgl = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Monochromator goniometer',
        motorpv = motaprefix + 'MGL',
        errormsgpv = motaprefix + 'MGL-MsgTxt',
        precision = 0.02,
    ),
    a2 = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Monochromator tow that',
        motorpv = motaprefix + 'A2',
        errormsgpv = motaprefix + 'A2-MsgTxt',
        precision = 0.02,
    ),
    a3_st = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Sample rotation',
        motorpv = motaprefix + 'A3',
        errormsgpv = motaprefix + 'A3-MsgTxt',
        precision = 0.02,
    ),
    a3 = device('nicos.core.device.DeviceAlias',
        description = 'Alias for a3',
        alias = 'a3_st',
        devclass = 'nicos.core.device.Moveable'
    ),
    a4 = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Sample two theta',
        motorpv = motaprefix + 'A4',
        errormsgpv = motaprefix + 'A4-MsgTxt',
        precision = 0.02,
    ),
    sro = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Sample auxiliary rotation',
        motorpv = motaprefix + 'SRO',
        errormsgpv = motaprefix + 'SRO-MsgTxt',
        precision = 0.02,
    ),
    stl = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Sample lower translation',
        motorpv = motbprefix + 'STL',
        errormsgpv = motbprefix + 'STL-MsgTxt',
        precision = 0.02,
    ),
    stu = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Sample upper translation',
        motorpv = motbprefix + 'STU',
        errormsgpv = motbprefix + 'STU-MsgTxt',
        precision = 0.02,
    ),
    sgl = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Sample lower tilt',
        motorpv = motbprefix + 'SGL',
        errormsgpv = motbprefix + 'SGL-MsgTxt',
        precision = 0.02,
    ),
    sgu = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Sample upper tilt',
        motorpv = motbprefix + 'SGU',
        errormsgpv = motbprefix + 'SGU-MsgTxt',
        precision = 0.02,
    ),
    a5 = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Analyser rotation',
        motorpv = motbprefix + 'A5',
        errormsgpv = motbprefix + 'A5-MsgTxt',
        precision = 0.02,
    ),
    ach = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Analyser curvature',
        motorpv = motbprefix + 'ACH',
        errormsgpv = motbprefix + 'ACH-MsgTxt',
        precision = 0.02,
    ),
    atl = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Analyser lower translation',
        motorpv = motbprefix + 'ATL',
        errormsgpv = motbprefix + 'ATL-MsgTxt',
        precision = 0.02,
    ),
    atu = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Analyser upper translation',
        motorpv = motbprefix + 'ATU',
        errormsgpv = motbprefix + 'ATU-MsgTxt',
        precision = 0.02,
    ),
    a6_raw = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Analyser two theta',
        motorpv = motbprefix + 'A6',
        errormsgpv = motbprefix + 'A6-MsgTxt',
        precision = 0.02,
    ),
    a6 = device('nicos_sinq.eiger.devices.a6motor.A6Motor',
        description = 'Analyser two theta',
        raw_motor = 'a6_raw',
        wait_period = 7,
        precision = .02,
    ),
    agl = device('nicos.devices.epics.pyepics.motor.EpicsMotor',
        description = 'Analyser goniometer',
        motorpv = motbprefix + 'AGL',
        errormsgpv = motbprefix + 'AGL-MsgTxt',
        precision = 0.02,
    ),
    timepreset = device('nicos_sinq.devices.epics.detector.EpicsTimerActiveChannel',
        description = 'Used to set and view time preset',
        unit = 'sec',
        readpv = cterprefix + '.TP',
        presetpv = cterprefix + '.TP',
    ),
    elapsedtime = device('nicos_sinq.devices.epics.detector.EpicsTimerPassiveChannel',
        description = 'Used to view elapsed time while counting',
        unit = 'sec',
        readpv = cterprefix + '.T',
    ),
    monitorpreset = device('nicos_sinq.devices.epics.detector.EpicsCounterActiveChannel',
        description = 'Used to set and view monitor preset',
        type = 'monitor',
        readpv = cterprefix + '.PR2',
        presetpv = cterprefix + '.PR2',
    ),
    ctr1 = device('nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel',
        description = 'The real neutron counter',
        type = 'monitor',
        readpv = cterprefix + '.S6',
    ),
    mon1 = device('nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel',
        description = 'First scalar counter channel',
        type = 'monitor',
        readpv = cterprefix + '.S2',
    ),
    mon2 = device('nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel',
        description = 'Second scalar counter channel',
        type = 'monitor',
        readpv = cterprefix + '.S4',
    ),
    protoncount = device('nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel',
        description = 'Fourth scalar counter channel',
        type = 'monitor',
        readpv = cterprefix + '.S5',
    ),
    counter = device('nicos_sinq.devices.detector.SinqDetector',
        description = 'EL737 counter box that counts neutrons and '
        'starts streaming events',
        startpv = cterprefix + '.CNT',
        pausepv = cterprefix + ':Pause',
        statuspv = cterprefix + ':Status',
        errormsgpv = cterprefix + ':MsgTxt',
        thresholdpv = cterprefix + ':Threshold',
        monitorpreset = 'monitorpreset',
        timepreset = 'timepreset',
        timers = ['elapsedtime'],
        monitors = [
            'ctr1',
            'mon1',
            'mon2',
            'protoncount',
        ],
        liveinterval = 7,
        saveintervals = [60]
    ),
    mono = device('nicos_sinq.devices.mono.SinqMonochromator',
        description = 'TASP monochromator',
        theta = 'a1',
        twotheta = 'a2',
        material = 'PG',
        reflection = (0, 0, 2),
        dvalue = 3.354,
        scatteringsense = -1,
        crystalside = -1,
        unit = 'meV',
        focmode = 'vertical',
        vfocuspars = [2.9, 8.45714],
        abslimits = [2.75, 20],
        focusv = 'mcv'
    ),
    ana = device('nicos_sinq.devices.mono.TasAnalyser',
        description = 'TASP analyser',
        theta = 'a5',
        twotheta = 'a6',
        material = 'PG',
        reflection = (0, 0, 2),
        dvalue = 3.354,
        scatteringsense = -1,
        crystalside = -1,
        unit = 'meV',
        focmode = 'horizontal',
        hfocuspars = [0.25, 4.01],
        abslimits = [2.75, 20],
        focush = 'ach'
    ),
    ei = device('nicos.core.device.DeviceAlias',
        description = 'Alias for driving the monochromator',
        alias = 'mono',
    ),
    ef = device('nicos.core.device.DeviceAlias',
        description = 'Alias for driving the analyser',
        alias = 'ana',
    ),
)
startupcode = """
SetDetectors(counter)
"""
